// main.go
package main

import (
	"encoding/json"
	"net/http"
	"sort"
	"sync"
	"time"
)

type RequestPayload struct {
	ToSort [][]int `json:"to_sort"`
}

type ResponsePayload struct {
	SortedArrays [][]int `json:"sorted_arrays"`
	TimeNS       int64   `json:"time_ns"`
}

func main() {
	http.HandleFunc("/process-single", ProcessSingle)
	http.HandleFunc("/process-concurrent", ProcessConcurrent)
	http.ListenAndServe(":8000", nil)
}

func ProcessSingle(w http.ResponseWriter, r *http.Request) {
	process(w, r, false)
}

func ProcessConcurrent(w http.ResponseWriter, r *http.Request) {
	process(w, r, true)
}

func process(w http.ResponseWriter, r *http.Request, concurrent bool) {
	var reqPayload RequestPayload
	err := json.NewDecoder(r.Body).Decode(&reqPayload)
	if err != nil {
		http.Error(w, "Invalid JSON payload", http.StatusBadRequest)
		return
	}

	startTime := time.Now()

	var sortedArrays [][]int

	if concurrent {
		sortedArrays = processConcurrent(reqPayload.ToSort)
	} else {
		sortedArrays = processSequential(reqPayload.ToSort)
	}

	endTime := time.Now()
	timeTaken := endTime.Sub(startTime).Nanoseconds()

	respPayload := ResponsePayload{
		SortedArrays: sortedArrays,
		TimeNS:       timeTaken,
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(respPayload)
}

func processSequential(arrays [][]int) [][]int {
	var sortedArrays [][]int

	for _, arr := range arrays {
		sortedArr := make([]int, len(arr))
		copy(sortedArr, arr)
		sort.Ints(sortedArr)
		sortedArrays = append(sortedArrays, sortedArr)
	}

	return sortedArrays
}

func processConcurrent(arrays [][]int) [][]int {
	var (
		wg           sync.WaitGroup
		mutex        sync.Mutex
		sortedArrays [][]int
	)

	for _, arr := range arrays {
		wg.Add(1)
		go func(arr []int) {
			defer wg.Done()

			sortedArr := make([]int, len(arr))
			copy(sortedArr, arr)
			sort.Ints(sortedArr)

			mutex.Lock()
			sortedArrays = append(sortedArrays, sortedArr)
			mutex.Unlock()
		}(arr)
	}

	wg.Wait()

	return sortedArrays
}
This example uses the standard library's sort package for sorting, and it demonstrates sequential and concurrent sorting based on the provided endpoint. Additionally, it measures the time taken for sorting in nanoseconds.

For Dockerization, you can create a Dockerfile like this:

Dockerfile
Copy code
# Dockerfile
FROM golang:latest

WORKDIR /app

COPY . .

RUN go build -o main .

CMD ["./main"]
